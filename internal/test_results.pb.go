// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.13.0
// source: test_results.proto

package internal

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TestResultsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project     string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Version     string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Variant     string `protobuf:"bytes,3,opt,name=variant,proto3" json:"variant,omitempty"`
	TaskName    string `protobuf:"bytes,4,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	TaskId      string `protobuf:"bytes,5,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Execution   int32  `protobuf:"varint,6,opt,name=execution,proto3" json:"execution,omitempty"`
	RequestType string `protobuf:"bytes,7,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"`
	Mainline    bool   `protobuf:"varint,8,opt,name=mainline,proto3" json:"mainline,omitempty"`
}

func (x *TestResultsInfo) Reset() {
	*x = TestResultsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_results_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResultsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResultsInfo) ProtoMessage() {}

func (x *TestResultsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_test_results_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResultsInfo.ProtoReflect.Descriptor instead.
func (*TestResultsInfo) Descriptor() ([]byte, []int) {
	return file_test_results_proto_rawDescGZIP(), []int{0}
}

func (x *TestResultsInfo) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *TestResultsInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TestResultsInfo) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

func (x *TestResultsInfo) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TestResultsInfo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TestResultsInfo) GetExecution() int32 {
	if x != nil {
		return x.Execution
	}
	return 0
}

func (x *TestResultsInfo) GetRequestType() string {
	if x != nil {
		return x.RequestType
	}
	return ""
}

func (x *TestResultsInfo) GetMainline() bool {
	if x != nil {
		return x.Mainline
	}
	return false
}

type TestResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestResultsRecordId string        `protobuf:"bytes,1,opt,name=test_results_record_id,json=testResultsRecordId,proto3" json:"test_results_record_id,omitempty"`
	Results             []*TestResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *TestResults) Reset() {
	*x = TestResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_results_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResults) ProtoMessage() {}

func (x *TestResults) ProtoReflect() protoreflect.Message {
	mi := &file_test_results_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResults.ProtoReflect.Descriptor instead.
func (*TestResults) Descriptor() ([]byte, []int) {
	return file_test_results_proto_rawDescGZIP(), []int{1}
}

func (x *TestResults) GetTestResultsRecordId() string {
	if x != nil {
		return x.TestResultsRecordId
	}
	return ""
}

func (x *TestResults) GetResults() []*TestResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type TestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestName       string               `protobuf:"bytes,1,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	Trial          int32                `protobuf:"varint,2,opt,name=trial,proto3" json:"trial,omitempty"`
	Status         string               `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	LogUrl         string               `protobuf:"bytes,4,opt,name=log_url,json=logUrl,proto3" json:"log_url,omitempty"`
	LineNum        int32                `protobuf:"varint,5,opt,name=line_num,json=lineNum,proto3" json:"line_num,omitempty"`
	TaskCreateTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=task_create_time,json=taskCreateTime,proto3" json:"task_create_time,omitempty"`
	TestStartTime  *timestamp.Timestamp `protobuf:"bytes,7,opt,name=test_start_time,json=testStartTime,proto3" json:"test_start_time,omitempty"`
	TestEndTime    *timestamp.Timestamp `protobuf:"bytes,8,opt,name=test_end_time,json=testEndTime,proto3" json:"test_end_time,omitempty"`
}

func (x *TestResult) Reset() {
	*x = TestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_results_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResult) ProtoMessage() {}

func (x *TestResult) ProtoReflect() protoreflect.Message {
	mi := &file_test_results_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResult.ProtoReflect.Descriptor instead.
func (*TestResult) Descriptor() ([]byte, []int) {
	return file_test_results_proto_rawDescGZIP(), []int{2}
}

func (x *TestResult) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *TestResult) GetTrial() int32 {
	if x != nil {
		return x.Trial
	}
	return 0
}

func (x *TestResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TestResult) GetLogUrl() string {
	if x != nil {
		return x.LogUrl
	}
	return ""
}

func (x *TestResult) GetLineNum() int32 {
	if x != nil {
		return x.LineNum
	}
	return 0
}

func (x *TestResult) GetTaskCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.TaskCreateTime
	}
	return nil
}

func (x *TestResult) GetTestStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.TestStartTime
	}
	return nil
}

func (x *TestResult) GetTestEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.TestEndTime
	}
	return nil
}

type TestResultsEndInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestResultsRecordId string `protobuf:"bytes,1,opt,name=test_results_record_id,json=testResultsRecordId,proto3" json:"test_results_record_id,omitempty"`
}

func (x *TestResultsEndInfo) Reset() {
	*x = TestResultsEndInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_results_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResultsEndInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResultsEndInfo) ProtoMessage() {}

func (x *TestResultsEndInfo) ProtoReflect() protoreflect.Message {
	mi := &file_test_results_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResultsEndInfo.ProtoReflect.Descriptor instead.
func (*TestResultsEndInfo) Descriptor() ([]byte, []int) {
	return file_test_results_proto_rawDescGZIP(), []int{3}
}

func (x *TestResultsEndInfo) GetTestResultsRecordId() string {
	if x != nil {
		return x.TestResultsRecordId
	}
	return ""
}

type TestResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestResultsRecordId string `protobuf:"bytes,1,opt,name=test_results_record_id,json=testResultsRecordId,proto3" json:"test_results_record_id,omitempty"`
}

func (x *TestResultsResponse) Reset() {
	*x = TestResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_results_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResultsResponse) ProtoMessage() {}

func (x *TestResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_test_results_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResultsResponse.ProtoReflect.Descriptor instead.
func (*TestResultsResponse) Descriptor() ([]byte, []int) {
	return file_test_results_proto_rawDescGZIP(), []int{4}
}

func (x *TestResultsResponse) GetTestResultsRecordId() string {
	if x != nil {
		return x.TestResultsRecordId
	}
	return ""
}

var File_test_results_proto protoreflect.FileDescriptor

var file_test_results_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x63, 0x65, 0x64, 0x61, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x01, 0x0a,
	0x0f, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x22, 0x6f, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x33, 0x0a, 0x16, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x22, 0xd5, 0x02, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x6f, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x44, 0x0a, 0x10, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x74, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74,
	0x65, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x12, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x33, 0x0a, 0x16, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x16,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x32, 0xbb, 0x02, 0x0a, 0x10, 0x43, 0x65, 0x64, 0x61, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x16, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1a, 0x2e, 0x63, 0x65, 0x64, 0x61,
	0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x12, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x1a, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x12, 0x2e, 0x63,
	0x65, 0x64, 0x61, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x1a, 0x1a, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x4f,
	0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x1a, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x0a, 0x5a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_test_results_proto_rawDescOnce sync.Once
	file_test_results_proto_rawDescData = file_test_results_proto_rawDesc
)

func file_test_results_proto_rawDescGZIP() []byte {
	file_test_results_proto_rawDescOnce.Do(func() {
		file_test_results_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_results_proto_rawDescData)
	})
	return file_test_results_proto_rawDescData
}

var file_test_results_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_test_results_proto_goTypes = []interface{}{
	(*TestResultsInfo)(nil),     // 0: cedar.TestResultsInfo
	(*TestResults)(nil),         // 1: cedar.TestResults
	(*TestResult)(nil),          // 2: cedar.TestResult
	(*TestResultsEndInfo)(nil),  // 3: cedar.TestResultsEndInfo
	(*TestResultsResponse)(nil), // 4: cedar.TestResultsResponse
	(*timestamp.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_test_results_proto_depIdxs = []int32{
	2, // 0: cedar.TestResults.results:type_name -> cedar.TestResult
	5, // 1: cedar.TestResult.task_create_time:type_name -> google.protobuf.Timestamp
	5, // 2: cedar.TestResult.test_start_time:type_name -> google.protobuf.Timestamp
	5, // 3: cedar.TestResult.test_end_time:type_name -> google.protobuf.Timestamp
	0, // 4: cedar.CedarTestResults.CreateTestResultsRecord:input_type -> cedar.TestResultsInfo
	1, // 5: cedar.CedarTestResults.AddTestResults:input_type -> cedar.TestResults
	1, // 6: cedar.CedarTestResults.StreamTestResults:input_type -> cedar.TestResults
	3, // 7: cedar.CedarTestResults.CloseTestResultsRecord:input_type -> cedar.TestResultsEndInfo
	4, // 8: cedar.CedarTestResults.CreateTestResultsRecord:output_type -> cedar.TestResultsResponse
	4, // 9: cedar.CedarTestResults.AddTestResults:output_type -> cedar.TestResultsResponse
	4, // 10: cedar.CedarTestResults.StreamTestResults:output_type -> cedar.TestResultsResponse
	4, // 11: cedar.CedarTestResults.CloseTestResultsRecord:output_type -> cedar.TestResultsResponse
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_test_results_proto_init() }
func file_test_results_proto_init() {
	if File_test_results_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_results_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResultsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_results_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_results_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_results_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResultsEndInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_results_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_results_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_test_results_proto_goTypes,
		DependencyIndexes: file_test_results_proto_depIdxs,
		MessageInfos:      file_test_results_proto_msgTypes,
	}.Build()
	File_test_results_proto = out.File
	file_test_results_proto_rawDesc = nil
	file_test_results_proto_goTypes = nil
	file_test_results_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CedarTestResultsClient is the client API for CedarTestResults service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CedarTestResultsClient interface {
	CreateTestResultsRecord(ctx context.Context, in *TestResultsInfo, opts ...grpc.CallOption) (*TestResultsResponse, error)
	AddTestResults(ctx context.Context, in *TestResults, opts ...grpc.CallOption) (*TestResultsResponse, error)
	StreamTestResults(ctx context.Context, opts ...grpc.CallOption) (CedarTestResults_StreamTestResultsClient, error)
	CloseTestResultsRecord(ctx context.Context, in *TestResultsEndInfo, opts ...grpc.CallOption) (*TestResultsResponse, error)
}

type cedarTestResultsClient struct {
	cc grpc.ClientConnInterface
}

func NewCedarTestResultsClient(cc grpc.ClientConnInterface) CedarTestResultsClient {
	return &cedarTestResultsClient{cc}
}

func (c *cedarTestResultsClient) CreateTestResultsRecord(ctx context.Context, in *TestResultsInfo, opts ...grpc.CallOption) (*TestResultsResponse, error) {
	out := new(TestResultsResponse)
	err := c.cc.Invoke(ctx, "/cedar.CedarTestResults/CreateTestResultsRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cedarTestResultsClient) AddTestResults(ctx context.Context, in *TestResults, opts ...grpc.CallOption) (*TestResultsResponse, error) {
	out := new(TestResultsResponse)
	err := c.cc.Invoke(ctx, "/cedar.CedarTestResults/AddTestResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cedarTestResultsClient) StreamTestResults(ctx context.Context, opts ...grpc.CallOption) (CedarTestResults_StreamTestResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CedarTestResults_serviceDesc.Streams[0], "/cedar.CedarTestResults/StreamTestResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &cedarTestResultsStreamTestResultsClient{stream}
	return x, nil
}

type CedarTestResults_StreamTestResultsClient interface {
	Send(*TestResults) error
	CloseAndRecv() (*TestResultsResponse, error)
	grpc.ClientStream
}

type cedarTestResultsStreamTestResultsClient struct {
	grpc.ClientStream
}

func (x *cedarTestResultsStreamTestResultsClient) Send(m *TestResults) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cedarTestResultsStreamTestResultsClient) CloseAndRecv() (*TestResultsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TestResultsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cedarTestResultsClient) CloseTestResultsRecord(ctx context.Context, in *TestResultsEndInfo, opts ...grpc.CallOption) (*TestResultsResponse, error) {
	out := new(TestResultsResponse)
	err := c.cc.Invoke(ctx, "/cedar.CedarTestResults/CloseTestResultsRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CedarTestResultsServer is the server API for CedarTestResults service.
type CedarTestResultsServer interface {
	CreateTestResultsRecord(context.Context, *TestResultsInfo) (*TestResultsResponse, error)
	AddTestResults(context.Context, *TestResults) (*TestResultsResponse, error)
	StreamTestResults(CedarTestResults_StreamTestResultsServer) error
	CloseTestResultsRecord(context.Context, *TestResultsEndInfo) (*TestResultsResponse, error)
}

// UnimplementedCedarTestResultsServer can be embedded to have forward compatible implementations.
type UnimplementedCedarTestResultsServer struct {
}

func (*UnimplementedCedarTestResultsServer) CreateTestResultsRecord(context.Context, *TestResultsInfo) (*TestResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestResultsRecord not implemented")
}
func (*UnimplementedCedarTestResultsServer) AddTestResults(context.Context, *TestResults) (*TestResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTestResults not implemented")
}
func (*UnimplementedCedarTestResultsServer) StreamTestResults(CedarTestResults_StreamTestResultsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTestResults not implemented")
}
func (*UnimplementedCedarTestResultsServer) CloseTestResultsRecord(context.Context, *TestResultsEndInfo) (*TestResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTestResultsRecord not implemented")
}

func RegisterCedarTestResultsServer(s *grpc.Server, srv CedarTestResultsServer) {
	s.RegisterService(&_CedarTestResults_serviceDesc, srv)
}

func _CedarTestResults_CreateTestResultsRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestResultsInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CedarTestResultsServer).CreateTestResultsRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cedar.CedarTestResults/CreateTestResultsRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CedarTestResultsServer).CreateTestResultsRecord(ctx, req.(*TestResultsInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CedarTestResults_AddTestResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CedarTestResultsServer).AddTestResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cedar.CedarTestResults/AddTestResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CedarTestResultsServer).AddTestResults(ctx, req.(*TestResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _CedarTestResults_StreamTestResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CedarTestResultsServer).StreamTestResults(&cedarTestResultsStreamTestResultsServer{stream})
}

type CedarTestResults_StreamTestResultsServer interface {
	SendAndClose(*TestResultsResponse) error
	Recv() (*TestResults, error)
	grpc.ServerStream
}

type cedarTestResultsStreamTestResultsServer struct {
	grpc.ServerStream
}

func (x *cedarTestResultsStreamTestResultsServer) SendAndClose(m *TestResultsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cedarTestResultsStreamTestResultsServer) Recv() (*TestResults, error) {
	m := new(TestResults)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CedarTestResults_CloseTestResultsRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestResultsEndInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CedarTestResultsServer).CloseTestResultsRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cedar.CedarTestResults/CloseTestResultsRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CedarTestResultsServer).CloseTestResultsRecord(ctx, req.(*TestResultsEndInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _CedarTestResults_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cedar.CedarTestResults",
	HandlerType: (*CedarTestResultsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTestResultsRecord",
			Handler:    _CedarTestResults_CreateTestResultsRecord_Handler,
		},
		{
			MethodName: "AddTestResults",
			Handler:    _CedarTestResults_AddTestResults_Handler,
		},
		{
			MethodName: "CloseTestResultsRecord",
			Handler:    _CedarTestResults_CloseTestResultsRecord_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTestResults",
			Handler:       _CedarTestResults_StreamTestResults_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "test_results.proto",
}
